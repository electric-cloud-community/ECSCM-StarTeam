# -*-Perl-*-

# config.ntest -
#
# Exercise ECSCM configuration management for Accurev.
#
# Copyright (c) 2005-2012 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use ECSelenium;
use ECTest;
use ECSCMTest;

initCommander();

my $N = $adminSession;
my $pluginKey = 'ECSCM-StarTeam';
my $rootPage = $configListPage;

my $sel = setupSelenium();
$sel->login();

ntest 'configuration_crud', {manual => 1}, sub {
    clearConfigs($N);

    $sel->open($rootPage);
    $sel->waitForVisible('id=scmList-table');
    assertEq('Currently, there are no records to display in this list.', $sel->getText('id=scmList_emptyMsg'));

    # Go to the create configuration page
    $sel->click('id=scmList-create');
    $sel->waitForVisible('id=scmCreatefb-table');

    my $type = 'StarTeam';
    assertSelectOptions($sel, ['', $type], 'id=scmCreate-types');

    # Select a type
    $sel->selectOption('id=scmCreate-types', $type);

    # Verify the form exists
    assertEq('OK', $sel->waitForElement('id=scmCreatefb_2_0'));
    
    #Check for the existance of elements
    assertExists($sel, 'id=scmCreatefb_2_1');
    assertExists($sel, "id=scmCreatefb_8_1");
    assertExists($sel, "id=scmCreatefb_cred1_username");
    assertExists($sel, "id=scmCreatefb_cred1_password1");
    assertExists($sel, "id=scmCreatefb_cred1_password2");
    assertExists($sel, 'id=scmCreatefb_11_1');
    assertExists($sel, 'id=scmCreatefb_14_1');
    assertExists($sel, 'id=scmCreatefb_17_1');
    #Check for values and text in the labels
    assertEq('Configuration Name:', $sel->getText('id=scmCreatefb_2_0'));
    assertEq('Required', $sel->getText('id=scmCreatefb_2_2'));
    assertEq('Description:', $sel->getText('id=scmCreatefb_5_0'));
    assertEq("$type configuration", $sel->getValue('id=scmCreatefb_5_1'));
    assertEq("Login As:", $sel->getText("id=scmCreatefb_8_0"));
    assertEq('EndPoint:', $sel->getText('id=scmCreatefb_11_0'));
    assertEq('', $sel->getText('id=scmCreatefb_11_1'));
    assertEq('Hostname:', $sel->getText('id=scmCreatefb_14_0'));
    assertEq('Required', $sel->getText('id=scmCreatefb_14_2'));
    assertEq('Password file:', $sel->getText('id=scmCreatefb_17_0'));
    assertEq('', $sel->getText('id=scmCreatefb_17_1'));
    assertEq('Password file is encrypted:', $sel->getText('id=scmCreatefb_20_0'));
    
    # Submit without required elements
    $sel->click('id=scmCreate-submit');
    # Checking required messages
    $sel->waitForVisible('id=scmCreatefb-diag-2');
    assertEq('This field is required.', $sel->getText('id=scmCreatefb-diag-2'));
    
    $sel->waitForVisible('id=scmCreatefb-diag-14');
    assertEq('This field is required.', $sel->getText('id=scmCreatefb-diag-14'));
    
    # Fill required values only
    my $testConfig = 'starteamTest1';
    my $host       = 'Localhost';
    $sel->type('id=scmCreatefb_2_1', $testConfig);
    $sel->type('id=scmCreatefb_14_1', $host);
    $sel->click('id=scmCreate-submit');

    # Wait for the list to show up again
    $sel->waitForVisible('id=scmList-table');
    assertEq($testConfig, $sel->getText('id=scmList_1_0'));
    assertEq("$type configuration", $sel->getText('id=scmList_1_1'));
    assertEq($pluginKey, $sel->getText('id=scmList_1_2'));
    assertExists($sel, 'id=scmList-edit');
    assertExists($sel, 'id=scmList-delete');
    assertEq('Edit', $sel->getText('id=scmList-edit'));
    assertEq('Delete', $sel->getText('id=scmList-delete'));

    # Load the edit page and validate the form
    $sel->click('id=scmList-edit');
    $sel->waitForVisible('id=scmEdit-table');
    
    #Check for the existance of elements
    assertExists($sel, "id=scmEdit_3_1");
    assertExists($sel, "id=scmEdit_cred1_username");
    assertExists($sel, "id=scmEdit_cred1_password1");
    assertExists($sel, "id=scmEdit_cred1_password2");
    assertExists($sel, 'id=scmEdit_6_1');
    assertExists($sel, 'id=scmEdit_9_1');
    assertExists($sel, 'id=scmEdit_12_1');
    assertExists($sel, 'id=scmEdit-submit');
    assertExists($sel, 'id=scmEdit-cancel');
    
    #Check for values and text in the labels
    assertEq('Description:', $sel->getText('id=scmEdit_0_0'));
    assertEq("$type configuration", $sel->getValue('id=scmEdit_0_1'));
    assertEq("Login As:", $sel->getText("id=scmEdit_3_0"));
    assertEq('EndPoint:', $sel->getText('id=scmEdit_6_0'));
    assertEq('', $sel->getText('id=scmEdit_6_1'));
    assertEq('Hostname:', $sel->getText('id=scmEdit_9_0'));
    assertEq('Required', $sel->getText('id=scmEdit_9_2'));
    assertEq('Password file:', $sel->getText('id=scmEdit_12_0'));
    assertEq('', $sel->getText('id=scmEdit_12_2'));
    assertEq('Password file is encrypted:', $sel->getText('id=scmEdit_15_0'));
    assertEq('OK', $sel->getText('id=scmEdit-submit'));
    assertEq('Cancel', $sel->getText('id=scmEdit-cancel'));

    # Make a change, then cancel and confirm there was no change
    $sel->type('id=scmEdit_0_1', "$type SCM config");
    $sel->click('id=scmEdit-cancel');
    $sel->waitForVisible('id=scmList-table');
    assertEq("$type configuration", $sel->getText('id=scmList_1_1'));
    assertOK(my $xpath = $N->getProperty($cfgsPath
        . "/$testConfig/description"));
    assertEq("$type configuration", $xpath->findvalue('//value')->value);

    # Edit the page again and save the change this time
    
    $sel->click('id=scmList-edit');
    $sel->waitForVisible('id=scmEdit-table');
    $sel->type('id=scmEdit_0_1', "$type SCM config");    
    $sel->click('id=scmEdit-submit');
  
    $sel->waitForVisible('id=scmList-table');
    assertEq("$type SCM config", $sel->getText('id=scmList_1_1'));
    assertOK($xpath = $N->getProperty($cfgsPath . "/$testConfig/description"));
    assertEq("$type SCM config", $xpath->findvalue('//value')->value);
    
    # Click delete, then cancel
    assertExists($sel, 'id=scmList-delete');
    $sel->click('id=scmList-delete');
    $sel->waitForElement('id=deleteOk');
    assertExists($sel, 'id=deleteOk');
    assertExists($sel, 'id=deleteCancel');
    assertEq('OK', $sel->getText('id=deleteOk'));
    assertEq('Cancel', $sel->getText('id=deleteCancel'));
    assertEq("Are you sure you want to delete SCM configuration '"
        . $testConfig . "'?", $sel->getText('id=deleteMsg'));
    $sel->click('id=deleteCancel');
    $sel->waitForElement('id=scmList_1_0');
    assertEq($testConfig, $sel->getText('id=scmList_1_0'));
    
    # Click delete then ok
    assertExists($sel, 'id=scmList-delete');
    $sel->click('id=scmList-delete');
    $sel->waitForElement('id=deleteOk');
    $sel->click('id=deleteOk');
    $sel->waitForVisible('id=scmList-table');
    assertEq('Currently, there are no records to display in this list.',
    $sel->getText('id=scmList_emptyMsg'));
    
};
